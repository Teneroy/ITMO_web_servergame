{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../sources/client/connection.ts"],"names":[],"mappings":"AAaA,MAAM,UAAU,GAAG,IAAI,SAAS,CAAE,qBAAqB,CAAE,CAAC;AAO1D,SAAS,cAAc,CAAE,QAAyB;IAEjD,UAAU,CAAC,gBAAgB,CAC1B,SAAS,EACT,CAAE,KAAK,EAAG,EAAE;QAEX,QAAQ,CAAE,WAAW,EAAE,KAAK,CAAC,IAAI,CAAE,CAAC;IACrC,CAAC,CACD,CAAC;AACH,CAAC;AAOD,SAAS,WAAW,CAAE,OAAyB;IAE9C,UAAU,CAAC,IAAI,CAAE,IAAI,CAAC,SAAS,CAAE,OAAO,CAAE,CAAE,CAAC;AAC9C,CAAC;AAED,OAAO,EACN,UAAU,EACV,cAAc,EACd,WAAW,GACX,CAAC","sourcesContent":["// @ts-ignore\r\nimport type {\r\n\tAnyClientMessage,\r\n} from '../common/messages.js';\r\n\r\n/**\r\n * Слушатель сообщений от сервера\r\n */\r\ntype MessageListener = ( sendMessageFunction: typeof sendMessage, data: unknown ) => void\r\n\r\n/**\r\n * Соединение по WebSocket\r\n */\r\nconst connection = new WebSocket( 'ws://localhost:8000' );\r\n\r\n/**\r\n * Добавляет слушатель сообщений по WebSocket\r\n * \r\n * @param listener Функция для обработки сообщений\r\n */\r\nfunction listenMessages( listener: MessageListener ): void\r\n{\r\n\tconnection.addEventListener(\r\n\t\t'message',\r\n\t\t( event ) =>\r\n\t\t{\r\n\t\t\tlistener( sendMessage, event.data );\r\n\t\t},\r\n\t);\r\n}\r\n\r\n/**\r\n * Отправляет сообщение на сервер\r\n * \r\n * @param message Сообщение, отправляемое на сервер\r\n */\r\nfunction sendMessage( message: AnyClientMessage ): void\r\n{\r\n\tconnection.send( JSON.stringify( message ) );\r\n}\r\n\r\nexport {\r\n\tconnection,\r\n\tlistenMessages,\r\n\tsendMessage,\r\n};\r\n\r\nexport type {\r\n\tMessageListener,\r\n};\r\n"]}